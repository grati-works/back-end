generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedback {
  id              Int            @id @unique @default(autoincrement())
  message         String
  attachment      String?
  emoji           String?
  deleted         Profile?       @relation("Delete", fields: [deleted_by], references: [id])
  deleted_by      Int?
  sender          Profile?       @relation("Send", fields: [sender_id], references: [id])
  sender_id       Int?
  receivers       Profile[]      @relation("Receive", references: [id])
  created_at      DateTime       @default(now())
  tags            Tag[]
  reactions       Reaction[]
  organization    Organization   @relation("Organization", fields: [organization_id], references: [id])
  organization_id Int
  notifications   Notification[]
  groups          Group[]
}

model User {
  id                        Int            @id @unique @default(autoincrement())
  name                      String
  username                  String         @unique
  email                     String         @unique
  password                  String
  profile_picture           String?
  profile_picture_public_id String?
  activated                 Boolean        @default(false)
  stripe_customer_id        String?        @unique
  owned_organizations       Organization[] @relation("OwnedOrganizations")
  organizations             Profile[]
  user_tokens               UserTokens[]
  subscriptions             Subscription[]
  notifications             Notification[]
}

model Profile {
  id                 Int               @id @unique @default(autoincrement())
  user               User              @relation(fields: [user_id], references: [id])
  user_id            Int
  groups             Group[]
  responsibility     String?
  description        String?
  skills             String?
  graduations        String?
  vinculed_accounts  VinculedAccount[]
  organization       Organization      @relation(fields: [organization_id], references: [id])
  organization_id    Int
  sended_feedbacks   Feedback[]        @relation("Send")
  received_feedbacks Feedback[]        @relation("Receive")
  deleted_feedbacks  Feedback[]        @relation("Delete")
  reactions          Reaction[]
  points             Int               @default(0)
}

model Organization {
  id           Int           @id @unique @default(autoincrement())
  owner        User          @relation("OwnedOrganizations", fields: [owner_id], references: [id])
  owner_id     Int
  name         String
  subscription Subscription?
  groups       Group[]
  users        Profile[]
  color        String?
  color_mode   ColorMode     @relation(fields: [mode_id], references: [id])
  mode_id      Int           @default(1)
  feedbacks    Feedback[]    @relation("Organization")
}

model ColorMode {
  id            Int            @id @unique @default(autoincrement())
  name          String
  organizations Organization[]
}

model Subscription {
  id              Int           @id @unique @default(autoincrement())
  acquired_at     DateTime      @default(now())
  acquired_by     User          @relation(fields: [user_id], references: [id])
  organization    Organization? @relation(fields: [organization_id], references: [id])
  organization_id Int?          @unique
  price_id        String
  status          String
  payment_ref     String        @unique
  user_id         Int
  max_users       Int
}

model Group {
  id              Int          @id @unique @default(autoincrement())
  name            String
  color           String?      @default("#000000")
  users           Profile[]
  organization    Organization @relation(fields: [organization_id], references: [id])
  permissions     Permission[]
  organization_id Int
  objective       Objective?
  privacy         Privacy[]
  feedbacks       Feedback[]
}

model Tag {
  id       Int        @id @unique @default(autoincrement())
  name     String     @unique
  feedback Feedback[]
}

model Objective {
  id         Int      @id @unique @default(autoincrement())
  name       String
  goal       Int
  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  expires_in DateTime
  group_id   Int      @unique
}

model Reaction {
  id          Int      @id @unique @default(autoincrement())
  emoji       String
  feedback    Feedback @relation(fields: [feedback_id], references: [id])
  feedback_id Int
  user        Profile  @relation(fields: [profile_id], references: [id])
  profile_id  Int
}

model VinculedAccount {
  id       Int     @id @unique @default(autoincrement())
  user     Profile @relation(fields: [user_id], references: [id])
  user_id  Int
  account  String
  provider String
}

model Privacy {
  id     Int     @id @unique @default(autoincrement())
  name   String
  groups Group[]
}

model Permission {
  id     Int     @id @unique @default(autoincrement())
  name   String
  groups Group[]
}

model UserTokens {
  id         Int      @id @unique @default(autoincrement())
  token      String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  expires_at DateTime
  created_at DateTime @default(now())
  type       String
}

model Notification {
  id          Int      @id @unique @default(autoincrement())
  created_at  DateTime @default(now())
  visualized  Boolean  @default(false)
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  feedback    Feedback @relation(fields: [feedback_id], references: [id], onDelete: Cascade)
  feedback_id Int
}
